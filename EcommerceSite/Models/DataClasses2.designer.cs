#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EcommerceSite.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Northwind")]
	public partial class DataClasses2DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCITY(CITY instance);
    partial void UpdateCITY(CITY instance);
    partial void DeleteCITY(CITY instance);
    partial void InsertCOUNTRY(COUNTRY instance);
    partial void UpdateCOUNTRY(COUNTRY instance);
    partial void DeleteCOUNTRY(COUNTRY instance);
    #endregion
		
		public DataClasses2DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["NorthwindConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CITY> CITies
		{
			get
			{
				return this.GetTable<CITY>();
			}
		}
		
		public System.Data.Linq.Table<COUNTRY> COUNTRies
		{
			get
			{
				return this.GetTable<COUNTRY>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CITY")]
	public partial class CITY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CITY_ID;
		
		private string _CITY_NAME;
		
		private System.Nullable<int> _COUNTRY_ID;
		
		private EntityRef<COUNTRY> _COUNTRY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCITY_IDChanging(int value);
    partial void OnCITY_IDChanged();
    partial void OnCITY_NAMEChanging(string value);
    partial void OnCITY_NAMEChanged();
    partial void OnCOUNTRY_IDChanging(System.Nullable<int> value);
    partial void OnCOUNTRY_IDChanged();
    #endregion
		
		public CITY()
		{
			this._COUNTRY = default(EntityRef<COUNTRY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CITY_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CITY_ID
		{
			get
			{
				return this._CITY_ID;
			}
			set
			{
				if ((this._CITY_ID != value))
				{
					this.OnCITY_IDChanging(value);
					this.SendPropertyChanging();
					this._CITY_ID = value;
					this.SendPropertyChanged("CITY_ID");
					this.OnCITY_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CITY_NAME", DbType="VarChar(100)")]
		public string CITY_NAME
		{
			get
			{
				return this._CITY_NAME;
			}
			set
			{
				if ((this._CITY_NAME != value))
				{
					this.OnCITY_NAMEChanging(value);
					this.SendPropertyChanging();
					this._CITY_NAME = value;
					this.SendPropertyChanged("CITY_NAME");
					this.OnCITY_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COUNTRY_ID", DbType="Int")]
		public System.Nullable<int> COUNTRY_ID
		{
			get
			{
				return this._COUNTRY_ID;
			}
			set
			{
				if ((this._COUNTRY_ID != value))
				{
					if (this._COUNTRY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCOUNTRY_IDChanging(value);
					this.SendPropertyChanging();
					this._COUNTRY_ID = value;
					this.SendPropertyChanged("COUNTRY_ID");
					this.OnCOUNTRY_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COUNTRY_CITY", Storage="_COUNTRY", ThisKey="COUNTRY_ID", OtherKey="COUNTRY_ID", IsForeignKey=true)]
		public COUNTRY COUNTRY
		{
			get
			{
				return this._COUNTRY.Entity;
			}
			set
			{
				COUNTRY previousValue = this._COUNTRY.Entity;
				if (((previousValue != value) 
							|| (this._COUNTRY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._COUNTRY.Entity = null;
						previousValue.CITies.Remove(this);
					}
					this._COUNTRY.Entity = value;
					if ((value != null))
					{
						value.CITies.Add(this);
						this._COUNTRY_ID = value.COUNTRY_ID;
					}
					else
					{
						this._COUNTRY_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("COUNTRY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.COUNTRY")]
	public partial class COUNTRY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _COUNTRY_ID;
		
		private string _COUNTRY_NAME;
		
		private EntitySet<CITY> _CITies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCOUNTRY_IDChanging(int value);
    partial void OnCOUNTRY_IDChanged();
    partial void OnCOUNTRY_NAMEChanging(string value);
    partial void OnCOUNTRY_NAMEChanged();
    #endregion
		
		public COUNTRY()
		{
			this._CITies = new EntitySet<CITY>(new Action<CITY>(this.attach_CITies), new Action<CITY>(this.detach_CITies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COUNTRY_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int COUNTRY_ID
		{
			get
			{
				return this._COUNTRY_ID;
			}
			set
			{
				if ((this._COUNTRY_ID != value))
				{
					this.OnCOUNTRY_IDChanging(value);
					this.SendPropertyChanging();
					this._COUNTRY_ID = value;
					this.SendPropertyChanged("COUNTRY_ID");
					this.OnCOUNTRY_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COUNTRY_NAME", DbType="VarChar(100)")]
		public string COUNTRY_NAME
		{
			get
			{
				return this._COUNTRY_NAME;
			}
			set
			{
				if ((this._COUNTRY_NAME != value))
				{
					this.OnCOUNTRY_NAMEChanging(value);
					this.SendPropertyChanging();
					this._COUNTRY_NAME = value;
					this.SendPropertyChanged("COUNTRY_NAME");
					this.OnCOUNTRY_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COUNTRY_CITY", Storage="_CITies", ThisKey="COUNTRY_ID", OtherKey="COUNTRY_ID")]
		public EntitySet<CITY> CITies
		{
			get
			{
				return this._CITies;
			}
			set
			{
				this._CITies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CITies(CITY entity)
		{
			this.SendPropertyChanging();
			entity.COUNTRY = this;
		}
		
		private void detach_CITies(CITY entity)
		{
			this.SendPropertyChanging();
			entity.COUNTRY = null;
		}
	}
}
#pragma warning restore 1591
